:root { }

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    // outline: 1px dotted red;
    // outline-offset: -0.5px;
}

.water {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    // width: 100vw;
    // height: 100vh;
}

.nav {
    display: flex;
    justify-content: space-between;
    padding: 10px;

    > * {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 30px;
        width: 50px;

        svg {
            height: 100%;
            animation: pop 0.3s forwards;
        }
    }
}

.hamburger {
    use::part(import) { }
}

@keyframes pop {
    50% {
        scale: 1.2;
    }
}

.day-g {

}

.night-g {

}








let version = 1.0;

let cacheName = "MyCacheV" + version;

let filesToCache = [
    "/",
    "/index.html",
    "js/main.js",
    "css/main.css"
];

self.addEventListener("install", function(event) {
    event.waitUntil(caches.open(cacheName).then((cache) =>{
        return cache.addAll(filesToCache);
    }));
    console.log("service worker installed...")
});

self.addEventListener('fetch', function(event) {
    console.log(event.request.url);
    event.respondWith(
        caches.match(event.request).then(function(response) {
            return response || fetch(event.request);
        })
    );
});

self.addEventListener("activate", function (e) {
    console.log("service worker: Activate");
    e.waitUntil(
        caches.keys().then(function (keyList) {
            return Promise.all(
                keyList.map(function (key) {
                    if (key !== cacheName) {
                        console.log("service worker: Removing old cache", key);
                        return caches.delete(key);
                    }
                })
            );
        })
    );
    return self.clients.claim();
});
